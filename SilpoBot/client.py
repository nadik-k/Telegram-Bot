from telebot import types
import db_handler

user_data = {}
titles = ["–Ü–º'—è", "–ü—Ä—ñ–∑–≤–∏—â–µ", "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è(dd.mm.yyyy)", "–ê–¥—Ä–µ—Å–∞", "–ü–æ—à—Ç–∞"]
current_title_index = {}

def user(message, user_phone, bot):
    bot.send_message(message.chat.id, f"–í—ñ—Ç–∞—é, {message.contact.first_name}! :)", reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, f"–†–∞–¥—ñ –±–∞—á–∏—Ç–∏ –í–∞—Å —Ç—É—Ç! –°–ø–æ–¥—ñ–≤–∞—é—Å—å, —É –Ω–∞—Å –í–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —Ä–æ–±–æ—Ç—É —Å–≤–æ—î—ó –º—Ä—ñ—ó!üíñ")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó')
    btn2 = types.KeyboardButton('–ú–æ—è –∞–Ω–∫–µ—Ç–∞')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É –∑—ñ —Å–ø–∏—Å–∫—É:", reply_markup=markup)
    user_data[message.chat.username] = {'phone': user_phone}

def handle_profile(message, bot):
    phone_number = user_data.get(message.chat.username, {}).get('phone')
    if phone_number:
        profile = db_handler.fetch_profile(phone_number)
        if profile:
            profile_message = f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\n"
            profile_message += f"–Ü–º'—è: {profile['first_name']}\n"
            profile_message += f"–ü—Ä—ñ–∑–≤–∏—â–µ: {profile['last_name']}\n"
            profile_message += f"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {profile['date']}\n"
            profile_message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile['phone']}\n"
            profile_message += f"–ê–¥—Ä–µ—Å–∞: {profile['address']}\n"
            profile_message += f"–ü–æ—à—Ç–∞: {profile['email']}\n"
            bot.send_message(message.chat.id, profile_message)
        else:
            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            itembtn1 = types.KeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏')
            itembtn2 = types.KeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            markup.add(itembtn1, itembtn2)
            bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.")

def handle_cprofile(message, bot):
    global current_title_index
    current_title_index[message.chat.id] = 0
    bot.send_message(message.chat.id, f"{titles[current_title_index[message.chat.id]]}:")
    bot.register_next_step_handler(message, handle_user_input)

def handle_user_input(message, bot):
    global current_title_index
    idx = current_title_index.get(message.chat.id, 0)
    if message.chat.username not in user_data:
        user_data[message.chat.username] = {}
    user_data[message.chat.username][titles[idx]] = message.text
    bot.send_message(message.chat.id, f"–í–∏ –≤–≤–µ–ª–∏: {message.text}")
    idx += 1
    if idx < len(titles):
        current_title_index[message.chat.id] = idx
        bot.send_message(message.chat.id, f"{titles[idx]}:")
        bot.register_next_step_handler(message, handle_user_input)
    else:
        bot.send_message(message.chat.id, "–í—Å—ñ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω–æ. –î—è–∫—É—é!")
        phone_number = user_data[message.chat.username].get('phone')
        if phone_number:
            cursor = db_handler.conn.cursor()
            add_message = (
                "INSERT INTO `profiles` (`first_name`, `last_name`, `date`, `phone`, `address`, `email`) "
                "VALUES (%s, %s, %s, %s, %s, %s)"
            )
            data_message = (
                user_data[message.chat.username]["–Ü–º'—è"],
                user_data[message.chat.username]["–ü—Ä—ñ–∑–≤–∏—â–µ"],
                user_data[message.chat.username]["–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è(dd.mm.yyyy)"],
                phone_number,
                user_data[message.chat.username]["–ê–¥—Ä–µ—Å–∞"],
                user_data[message.chat.username]["–ü–æ—à—Ç–∞"]
            )
            cursor.execute(add_message, data_message)
            db_handler.conn.commit()
            cursor.close()
        current_title_index.pop(message.chat.id, None)
        user_data.pop(message.chat.username, None)

def handle_back(message, bot):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó')
    itembtn2 = types.KeyboardButton('–ú–æ—è –∞–Ω–∫–µ—Ç–∞')
    markup.add(itembtn1, itembtn2)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É –∑—ñ —Å–ø–∏—Å–∫—É:", reply_markup=markup)

def send_vacancies(message, bot):
    vacancies = db_handler.fetch_data()
    if vacancies:
        for vacancy in vacancies:
            name = vacancy['name']
            price = vacancy['price']
            employment = vacancy['employment']
            experience = vacancy['experience']
            requirements = vacancy['requirements']
            message_text = (
                f"üìù _–ù–∞–∑–≤–∞_: *{name}*\n\n"
                f"üí∞ _–ó–∞—Ä–ø–ª–∞—Ç–∞_: *{price}*\n\n"
                f"üïí _–ó–∞–π–Ω—è—Ç—ñ—Å—Ç—å_: *{employment}*\n\n"
                f"üìà _–î–æ—Å–≤—ñ–¥_: *{experience}*\n\n"
                f"üìã _–û–±–æ–≤'—è–∑–∫–∏_: *{requirements}*"
            )
            reply_markup = types.InlineKeyboardMarkup()
            reply_markup.row(types.InlineKeyboardButton(text='–û–±—Ä–∞—Ç–∏', callback_data=f'select_{vacancy["id"]}'))
            bot.send_message(
                message.chat.id,
                text=message_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    else:
        bot.send_message(message.chat.id, "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π.")

def register_candidate(profile_id, job_id):
    cursor = db_handler.conn.cursor()
    add_candidate = "INSERT INTO candidates (profile_id, job_id) VALUES (%s, %s)"
    data_candidate = (profile_id, job_id)
    cursor.execute(add_candidate, data_candidate)
    db_handler.conn.commit()
    cursor.close()